#!/usr/bin/env python

import sys
import os
import optparse
import json
import datetime

current = os.path.dirname(os.path.abspath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)


from iatidq.models import *
import iatidq.survey
import iatidq.dqorganisations
import iatidq.dqpackages
import iatidq.dqregistry
import iatidq.dqdownload
import iatidq.dqcsv

def clear_survey(options):
    organisation_code = options.organisation_code.decode('ascii')
    assert organisation_code

    try:
        iatidq.survey.data.deleteSurveyData(organisation_code)
    except iatidq.survey.data.NoSuchSurvey:
        print "No such survey"
        sys.exit(1)

def create_survey(options):
    organisation_code = options.organisation_code.decode('ascii')
    assert organisation_code

    org_id = iatidq.dqorganisations.organisationid_by_code(organisation_code)

    s = iatidq.survey.data.getOrCreateSurvey({ 
            "organisation_id": org_id
            })

def get_package_names(organisation_code):
    for p in iatidq.dqorganisations.organisationPackages(
        organisation_code=organisation_code):
        yield p.Package.package_name

def list_packages(options):
    organisation_code = options.organisation_code
    assert organisation_code

    for p in get_package_names(organisation_code):
        print p

# where p is the package name
def do_reload_package(package_name):
    iatidq.dqregistry.refresh_package_by_name(package_name)
    iatidq.dqregistry.activate_packages([(package_name, True)], 
                                        clear_revision_id=True)
    iatidq.dqregistry.clear_hash(package_name)
    iatidq.dqdownload.run(package_name=package_name)

def reload_packages(options):
    organisation_code = options.organisation_code
    assert organisation_code

    for p in get_package_names(organisation_code):
        do_reload_package(p)

def reload_package(options):
    package_name = options.package_name
    assert package_name

    do_reload_package(package_name)

def compare_aggregation(options):
    organisation_code = options.organisation_code.decode('ascii')
    filename = options.filename
    assert organisation_code
    assert filename

    from iatidq import dqorganisations

    expected_data = json.load(file(filename))

    org_id = dqorganisations.organisationid_by_code(organisation_code)

    from iatidq import db
    
    sql = '''select package_id, aggregateresulttype_id, test_id, 
                  result_hierarchy, results_data, results_num 
           from aggregateresult where organisation_id = %s 
           order by id;'''

    results = map(list, db.engine.execute(sql, (org_id, )))

    if results == expected_data:
        print "PASS"
        sys.exit(0)
    else:
        print json.dumps(results, indent=2)
        sys.exit(1)

def associate_test(options):
    assert options.test_id
    assert options.indicator
    from iatidq import db

    sql = '''select id from indicator where name = %s'''
    results = db.engine.execute(sql, (options.indicator,)).fetchall()

    assert len(results) == 1
    (indicator_id, ) = results[0]

    sql = '''insert into indicatortest (test_id, indicator_id)
               values (%s, %s);'''

    db.engine.execute(sql, (options.test_id, indicator_id))

def compare_summary(options):
    assert options.organisation_code
    assert options.filename
    organisation_code = options.organisation_code.decode('ascii')
    filename = options.filename

    aggregation_type = 2

    from iatidq import dqorganisations

    expected_data = json.load(file(filename))

    organisation = dqorganisations.organisation_by_code(organisation_code)

    aggregate_results = dqorganisations._organisation_detail(
        organisation, aggregation_type)

    aggregate_results = json.loads(json.dumps(aggregate_results, 
                                              sort_keys=True))

    if aggregate_results == expected_data:
        print "PASS"
        sys.exit(0)
    else:
        print json.dumps(aggregate_results, indent=2, sort_keys=True)
        sys.exit(1)

def make_survey_data(options):
    from iatidq import dqorganisations
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')
    org_id = dqorganisations.organisationid_by_code(organisation_code)
    print "faking survey for %s" % organisation_code

    while True:
        make_survey_data_for_current_workflow(organisation_code)

def make_survey_data_for_current_workflow(organisation_code):
    survey, workflow = iatidq.survey.data.getSurvey(organisation_code)

    print "current workflow: %s" % workflow.name

    from iatidq import dqindicators
    indicators = dqindicators.indicators(indicatorgroup=u"2014index")

    for indicator in indicators:
        data = {
            'organisationsurvey_id': survey.id,
            'indicator_id': indicator.id,
            'workflow_id': workflow.id,
            'published_status': 1,
            'published_source': "hello",
            'published_comment': "hello",
            'published_format': 2,
            'published_accepted': 1.0,
            'ordinal_value': "50"
            }

        iatidq.survey.data.addSurveyData(data)

    iatidq.survey.data.advanceSurvey(survey)
        

def make_csv_output(options):
    organisations = Organisation.query.all()
    s = iatidq.dqcsv.make_csv(organisations, True, True)
    print s.read()

def clear_queue(options):
    from iatidq import queue
    def run_queue(queue_name):
        while True:
            queue.handle_queue(queue_name, callback_fn)

    def callback_fn(ch, method, properties, body):
        print "Dequeuing"
        ch.basic_ack(delivery_tag=method.delivery_tag)

    the_queue='iati_download_queue'
    [ run_queue(queue_name) for queue_name in
                ['iati_download_queue', 'iati_tests_queue'] ]

def test_package(options):
    package_name = options.package_name
    assert package_name
    
    filename = options.filename
    assert filename

    import iatidq.test_queue
    iatidq.test_queue.test_one_package(filename, package_name)

class NoAggregateResults(Exception): pass

def get_aggregate_result_runtime_for_package(package_id, test_ids):
    from iatidq import db

    # foreach test
    #   get matching runtimes
    #      if no match, raise
    #
    # combine all runtimes into a set
    # get oldest runtime in set

    assert len(test_ids) > 0

    def runtime_for_test(test_id):
        sql = '''select runtime_id from aggregateresult
                   where test_id = %s and
                         package_id = %s;'''

        results = [i[0] for i in db.engine.execute(sql, (test_id, package_id))]
        if len(results) == 0:
            raise NoAggregateResults(test_id)

        sql = '''select id from runtime where id in (%s)
                   order by runtime_datetime desc;'''

        ids = ",".join(map(str, results))
        rids = db.engine.execute(sql % ids)

        most_recent_runtime = [i[0] for i in rids][0]
        return most_recent_runtime

    runtime_ids = [ runtime_for_test(test_id) for test_id in test_ids ]
    runtime_ids = [ i for i in set(runtime_ids) ]

    sql = '''select id, runtime_datetime from runtime where id in (%s)
               order by runtime_datetime;'''

    ids = ",".join(map(str, runtime_ids))
    rids = db.engine.execute(sql % ids)

    oldest_test_runtime = [i for i in rids][0]

    return tuple(oldest_test_runtime)

def get_package_name(package_id):
    sql = '''select package_name from package where id = %s'''
    results = db.engine.execute(sql, (package_id,))
    package_name = results.fetchall()[0][0]
    return package_name

def check_package_results(options):
    package_name = options.package_name
    assert package_name or options.all_packages
    if options.all_packages:
        assert options.organisation_code
    
    ''' find list of expected aggregations
        is set complete?
        get timestamps
        sort by timestamps
        report oldest timestamp'''

    from iatidq import db
    first = lambda x : x.__getitem__(0)

    sql = '''select id from test where id >= 0 and active = 't'
               and test_level = 1;'''

    test_ids = map(first, db.engine.execute(sql, ()))
    assert test_ids

    if options.all_packages:
        sql = '''select id from organisation where organisation_code = %s;'''
        results = db.engine.execute(sql, (options.organisation_code,))
        org_id = results.fetchall()[0][0]

        sql = '''select package_id from organisationpackage 
                   left join package on package_id = package.id 
                   where organisation_id = %s and 
                   package_name not like %s;'''
        package_ids = [row[0] for row in db.engine.execute(
                sql, (org_id, '%-org'))]
    else:
        sql = '''select id from package where package_name = %s'''
        package_ids = [row[0] for row in db.engine.execute(
                sql, (package_name,))]

    assert len(package_ids) > 0
    if not options.all_packages:
        assert len(package_ids) == 1


    for package_id in package_ids:
        pkg_name = get_package_name(package_id)

        try:
            runtime_id, date = get_aggregate_result_runtime_for_package(
                package_id, test_ids)
            print "%s,%d,%s,%s" % (pkg_name, runtime_id,
                                date.strftime('%Y-%m-%d %H:%M:%S'),"OK")
        except NoAggregateResults as exc:
            print "%s,,,No aggregate results for test %d" % (pkg_name, exc.args[0])

def update_frequencies(options):
    import iatidq.dqorganisations
    iatidq.dqorganisations.downloadOrganisationFrequency()

def list_modes(options):
    for key in sorted(modes.keys()):
        print key

modes = {
    "clear-survey": clear_survey,
    "create-survey": create_survey,
    "list-packages": list_packages,
    "reload-packages": reload_packages,
    "reload-package": reload_package,
    "compare-aggregation": compare_aggregation,
    "compare-summary": compare_summary,
    "list-modes": list_modes,
    "make-survey-data": make_survey_data,
    "make-csv-output": make_csv_output,
    "clear-queue": clear_queue,
    "associate-test": associate_test,
    "test-package": test_package,
    "check-package-results": check_package_results,
    "update-frequencies": update_frequencies
    }

def run():
    parser = optparse.OptionParser()
    parser.add_option("--mode", dest="mode",
                      action="store")
    parser.add_option("--organisation", dest="organisation_code",
                      action="store")
    parser.add_option("--filename", dest="filename",
                      action="store")
    parser.add_option("--name", dest="package_name",
                      action="store")
    parser.add_option("--test-id", type="int", dest="test_id",
                      action="store")
    parser.add_option("--indicator", dest="indicator",
                      action="store")
    parser.add_option("--all-packages", dest="all_packages",
                      action="store_true")
    options, rest = parser.parse_args()

    if not options.mode:
        print "Must specify a mode; use\n\n dqtool --mode list-modes\n\nto see them"
        sys.exit(1)
    
    if options.mode not in modes:
        print "Mode must be one of:"
        for mode in modes:
            print "  ", mode

    modes[options.mode](options)

if __name__ == '__main__':
    run()
